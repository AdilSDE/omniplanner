<?xml version="1.0" encoding="UTF-8"?>
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.1.RELEASE</version>
    <relativePath></relativePath>
  </parent>
  <groupId>com.microd</groupId>
  <artifactId>image-generator</artifactId> <!-- Name of your project -->
  <version>${revision}</version>        <!-- this is used by maven -->
  <packaging>jar</packaging>            <!-- REQUIRED -->
  <name>image-generator</name>
  <description>Image conversion for OmniPlanner</description>

  <properties>
    <!-- versions -->
    <revision>1-0-4</revision>          <!-- Version of Roomplanner Image Generator.        XXX-VERSION -->
    <java.version>1.8</java.version>
    <batik.version>1.10</batik.version>
    <fop.version>2.8</fop.version>
    <pdfbox.version>2.0.0</pdfbox.version>
    <!--GCP configuration-->
<!--    <appengine.maven.plugin>1.9.76</appengine.maven.plugin>-->
<!--    <jetty.maven.plugin>9.4.19.v20190610</jetty.maven.plugin>-->

    <maven.compiler.source>1.8</maven.compiler.source> <!-- REQUIRED -->
    <maven.compiler.target>1.8</maven.compiler.target> <!-- REQUIRED -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <failOnMissingWebXml>false</failOnMissingWebXml> <!-- REQUIRED -->

    <!--Spring cloud and Aws config-->
    <spring-cloud.version>Hoxton.SR6</spring-cloud.version>
    <wrapper.version>1.0.17.RELEASE</wrapper.version>
    <lombok.version>1.18.22</lombok.version>
  </properties>

  <dependencies>
    <!--GCP configuration-->
<!--    <dependency>-->
<!--      <groupId>org.springframework.boot</groupId>-->
<!--      <artifactId>spring-boot-starter-web</artifactId>-->
<!--      &lt;!&ndash; Exclude Tomcat so that it doesn&amp;#39;t conflict w/ Jetty server &ndash;&gt;-->
<!--      &lt;!&ndash;      <exclusions>&ndash;&gt;-->
<!--      &lt;!&ndash;        <exclusion>&ndash;&gt;-->
<!--      &lt;!&ndash;          <groupId>org.springframework.boot</groupId>&ndash;&gt;-->
<!--      &lt;!&ndash;          <artifactId>spring-boot-starter-tomcat</artifactId>&ndash;&gt;-->
<!--      &lt;!&ndash;        </exclusion>&ndash;&gt;-->
<!--      &lt;!&ndash;      </exclusions>&ndash;&gt;-->
<!--    </dependency>-->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>

    <!--for AWS S3 bucket or we can use AwsSdk dependency also-->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-aws</artifactId>
    </dependency>

    <!--to execute spring cloud function as endpoints locally-->
<!--            <dependency>-->
<!--                <groupId>org.springframework.cloud</groupId>-->
<!--                <artifactId>spring-cloud-starter-function-web</artifactId>-->
<!--            </dependency>-->
<!--            <dependency>-->
<!--                <groupId>org.springframework.cloud</groupId>-->
<!--                <artifactId>spring-cloud-function-compiler</artifactId>-->
<!--            </dependency>-->

    <!--for Aws lamda function-->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-function-adapter-aws</artifactId>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-events</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-core</artifactId>
      <version>1.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
    </dependency>

<!--local Fop build replaced with global-->
<!--    <dependency>-->
<!--      <groupId>com.microd</groupId>-->
<!--      <artifactId>fop</artifactId>-->
<!--      <version>2.3.patch2815</version>-->
<!--    </dependency>-->

    <dependency>
      <groupId>org.apache.avalon.framework</groupId>
      <artifactId>avalon-framework-api</artifactId>
      <version>4.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avalon.framework</groupId>
      <artifactId>avalon-framework-impl</artifactId>
      <version>4.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20131018</version>
      <type>jar</type>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
      <scope>provided</scope>
    </dependency>

     <!--replaced by local FOP build-->
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>fop</artifactId>
      <version>${fop.version}</version>
      <exclusions>
         <exclusion>
          <groupId>xml-apis</groupId>
          <artifactId>xml-apis</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- PDF Merging -->
    <dependency>
      <groupId>org.apache.pdfbox</groupId>
      <artifactId>pdfbox</artifactId>
      <version>${pdfbox.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>batik-codec</artifactId>
      <version>${batik.version}</version>
    </dependency>
    <!-- Batik Dependencies -->
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>batik-rasterizer</artifactId>
      <version>${batik.version}</version>
    </dependency>
    <!--for GCP-->
  <!--  <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-storage</artifactId>
      <version>1.62.0</version>
    </dependency>-->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.springframework.boot.experimental</groupId>
            <artifactId>spring-boot-thin-layout</artifactId>
            <version>${wrapper.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.4</version>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
          <shadedArtifactAttached>true</shadedArtifactAttached>
          <shadedClassifierName>aws</shadedClassifierName>
        </configuration>
      </plugin>
      <!-- Used for local debugging -->
<!--      <plugin>-->
<!--        <groupId>org.eclipse.jetty</groupId>-->
<!--        <artifactId>jetty-maven-plugin</artifactId>-->
<!--        <version>${jetty.maven.plugin}</version>-->
<!--      </plugin>-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.5.1</version>
        <!--commented to not install from local-->
<!--        <configuration>-->
<!--          <groupId>com.microd</groupId>-->
<!--          <artifactId>fop</artifactId>-->
<!--          <version>2.3.patch2815</version>-->
<!--          <packaging>jar</packaging>-->
<!--          <file>${basedir}/lib/fop-2.3.jar</file>-->
<!--          <generatePom>true</generatePom>-->
<!--        </configuration>-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <id>install-jar-lib</id>-->
<!--            <goals>-->
<!--              <goal>install-file</goal>-->
<!--            </goals>-->
<!--            <phase>validate</phase>-->
<!--          </execution>-->
<!--        </executions>-->
      </plugin>
    </plugins>
    <finalName>image-generator-aws-lambda</finalName>
  </build>
</project>